# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.0
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError('Python 2.7 or later required')

# Import the low-level C/C++ module
if __package__ or '.' in __name__:
    from . import _cnumpydb
else:
    import _cnumpydb

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if name == "thisown":
        return self.this.own(value)
    if name == "this":
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if not static:
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if name == "thisown":
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


NUMPYDB_EQ = _cnumpydb.NUMPYDB_EQ
NUMPYDB_GE = _cnumpydb.NUMPYDB_GE
NUMPYDB_GT = _cnumpydb.NUMPYDB_GT
NUMPYDB_GE_LE = _cnumpydb.NUMPYDB_GE_LE
NUMPYDB_GE_LT = _cnumpydb.NUMPYDB_GE_LT
NUMPYDB_GT_LE = _cnumpydb.NUMPYDB_GT_LE
NUMPYDB_GT_LT = _cnumpydb.NUMPYDB_GT_LT
NUMPYDB_LE = _cnumpydb.NUMPYDB_LE
NUMPYDB_LT = _cnumpydb.NUMPYDB_LT
NUMPYDB_GETDATA = _cnumpydb.NUMPYDB_GETDATA
NUMPYDB_GETKEYS = _cnumpydb.NUMPYDB_GETKEYS
NUMPYDB_GETBOTH = _cnumpydb.NUMPYDB_GETBOTH
NUMPYDB_GETCOUNT = _cnumpydb.NUMPYDB_GETCOUNT
class NumpyDB(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _cnumpydb.NumpyDB_swiginit(self, _cnumpydb.new_NumpyDB(*args))
    __swig_destroy__ = _cnumpydb.delete_NumpyDB

    def open(self, pyobj_dbfile, pyobj_db_open_flags):
        return _cnumpydb.NumpyDB_open(self, pyobj_dbfile, pyobj_db_open_flags)

    def create(self, pyobj_dbfile, pyobj_key_descr, pyobj_data_descr):
        return _cnumpydb.NumpyDB_create(self, pyobj_dbfile, pyobj_key_descr, pyobj_data_descr)

    def close(self):
        return _cnumpydb.NumpyDB_close(self)

    def set_cachesize(self, gbytes, bytes, ncache):
        return _cnumpydb.NumpyDB_set_cachesize(self, gbytes, bytes, ncache)

    def put(self, key_obj, data_obj):
        return _cnumpydb.NumpyDB_put(self, key_obj, data_obj)

    def between(self, pyobj_low, pyobj_high, pyobj_action):
        return _cnumpydb.NumpyDB_between(self, pyobj_low, pyobj_high, pyobj_action)

    def range_generic(self, pyobj_low, pyobj_high, pyobj_range_type, pyobj_return):
        return _cnumpydb.NumpyDB_range_generic(self, pyobj_low, pyobj_high, pyobj_range_type, pyobj_return)

    def match(self, pyobj_value, pyobj_action):
        return _cnumpydb.NumpyDB_match(self, pyobj_value, pyobj_action)

    def print_nrecords(self, obj):
        return _cnumpydb.NumpyDB_print_nrecords(self, obj)

    def file_name(self):
        return _cnumpydb.NumpyDB_file_name(self)

    def key_dtype(self):
        return _cnumpydb.NumpyDB_key_dtype(self)

    def data_dtype(self):
        return _cnumpydb.NumpyDB_data_dtype(self)

    def set_verbosity(self, verbosity):
        return _cnumpydb.NumpyDB_set_verbosity(self, verbosity)

    def print_info(self):
        return _cnumpydb.NumpyDB_print_info(self)

    def test(self, obj):
        return _cnumpydb.NumpyDB_test(self, obj)

# Register NumpyDB in _cnumpydb:
_cnumpydb.NumpyDB_swigregister(NumpyDB)



