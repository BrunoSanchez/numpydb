# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_cnumpydb')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_cnumpydb')
    _cnumpydb = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_cnumpydb', [dirname(__file__)])
        except ImportError:
            import _cnumpydb
            return _cnumpydb
        try:
            _mod = imp.load_module('_cnumpydb', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _cnumpydb = swig_import_helper()
    del swig_import_helper
else:
    import _cnumpydb
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

NUMPYDB_EQ = _cnumpydb.NUMPYDB_EQ
NUMPYDB_GE = _cnumpydb.NUMPYDB_GE
NUMPYDB_GT = _cnumpydb.NUMPYDB_GT
NUMPYDB_GE_LE = _cnumpydb.NUMPYDB_GE_LE
NUMPYDB_GE_LT = _cnumpydb.NUMPYDB_GE_LT
NUMPYDB_GT_LE = _cnumpydb.NUMPYDB_GT_LE
NUMPYDB_GT_LT = _cnumpydb.NUMPYDB_GT_LT
NUMPYDB_LE = _cnumpydb.NUMPYDB_LE
NUMPYDB_LT = _cnumpydb.NUMPYDB_LT
NUMPYDB_GETDATA = _cnumpydb.NUMPYDB_GETDATA
NUMPYDB_GETKEYS = _cnumpydb.NUMPYDB_GETKEYS
NUMPYDB_GETBOTH = _cnumpydb.NUMPYDB_GETBOTH
NUMPYDB_GETCOUNT = _cnumpydb.NUMPYDB_GETCOUNT

def init_numpy() -> "int *":
    return _cnumpydb.init_numpy()
init_numpy = _cnumpydb.init_numpy
IS_LITTLE_ENDIAN = _cnumpydb.IS_LITTLE_ENDIAN
IS_BIG_ENDIAN = _cnumpydb.IS_BIG_ENDIAN
NUMPYDB_BREAK_NONE = _cnumpydb.NUMPYDB_BREAK_NONE
NUMPYDB_BREAK_LELOW = _cnumpydb.NUMPYDB_BREAK_LELOW
NUMPYDB_BREAK_GTHIGH = _cnumpydb.NUMPYDB_BREAK_GTHIGH
NUMPYDB_BREAK_GEHIGH = _cnumpydb.NUMPYDB_BREAK_GEHIGH
NUMPYDB_KEEP_ANY = _cnumpydb.NUMPYDB_KEEP_ANY
NUMPYDB_KEEP_GTLOW = _cnumpydb.NUMPYDB_KEEP_GTLOW
class NUMPYDB_RANGE_STRUCT(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NUMPYDB_RANGE_STRUCT, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NUMPYDB_RANGE_STRUCT, name)
    __repr__ = _swig_repr
    __swig_setmethods__["low"] = _cnumpydb.NUMPYDB_RANGE_STRUCT_low_set
    __swig_getmethods__["low"] = _cnumpydb.NUMPYDB_RANGE_STRUCT_low_get
    if _newclass:
        low = _swig_property(_cnumpydb.NUMPYDB_RANGE_STRUCT_low_get, _cnumpydb.NUMPYDB_RANGE_STRUCT_low_set)
    __swig_setmethods__["high"] = _cnumpydb.NUMPYDB_RANGE_STRUCT_high_set
    __swig_getmethods__["high"] = _cnumpydb.NUMPYDB_RANGE_STRUCT_high_get
    if _newclass:
        high = _swig_property(_cnumpydb.NUMPYDB_RANGE_STRUCT_high_get, _cnumpydb.NUMPYDB_RANGE_STRUCT_high_set)
    __swig_setmethods__["query_type"] = _cnumpydb.NUMPYDB_RANGE_STRUCT_query_type_set
    __swig_getmethods__["query_type"] = _cnumpydb.NUMPYDB_RANGE_STRUCT_query_type_get
    if _newclass:
        query_type = _swig_property(_cnumpydb.NUMPYDB_RANGE_STRUCT_query_type_get, _cnumpydb.NUMPYDB_RANGE_STRUCT_query_type_set)
    __swig_setmethods__["return_type"] = _cnumpydb.NUMPYDB_RANGE_STRUCT_return_type_set
    __swig_getmethods__["return_type"] = _cnumpydb.NUMPYDB_RANGE_STRUCT_return_type_get
    if _newclass:
        return_type = _swig_property(_cnumpydb.NUMPYDB_RANGE_STRUCT_return_type_get, _cnumpydb.NUMPYDB_RANGE_STRUCT_return_type_set)
    __swig_setmethods__["cursor_start_flags"] = _cnumpydb.NUMPYDB_RANGE_STRUCT_cursor_start_flags_set
    __swig_getmethods__["cursor_start_flags"] = _cnumpydb.NUMPYDB_RANGE_STRUCT_cursor_start_flags_get
    if _newclass:
        cursor_start_flags = _swig_property(_cnumpydb.NUMPYDB_RANGE_STRUCT_cursor_start_flags_get, _cnumpydb.NUMPYDB_RANGE_STRUCT_cursor_start_flags_set)
    __swig_setmethods__["cursor_step_flags"] = _cnumpydb.NUMPYDB_RANGE_STRUCT_cursor_step_flags_set
    __swig_getmethods__["cursor_step_flags"] = _cnumpydb.NUMPYDB_RANGE_STRUCT_cursor_step_flags_get
    if _newclass:
        cursor_step_flags = _swig_property(_cnumpydb.NUMPYDB_RANGE_STRUCT_cursor_step_flags_get, _cnumpydb.NUMPYDB_RANGE_STRUCT_cursor_step_flags_set)
    __swig_setmethods__["break_cond"] = _cnumpydb.NUMPYDB_RANGE_STRUCT_break_cond_set
    __swig_getmethods__["break_cond"] = _cnumpydb.NUMPYDB_RANGE_STRUCT_break_cond_get
    if _newclass:
        break_cond = _swig_property(_cnumpydb.NUMPYDB_RANGE_STRUCT_break_cond_get, _cnumpydb.NUMPYDB_RANGE_STRUCT_break_cond_set)
    __swig_setmethods__["keep_cond"] = _cnumpydb.NUMPYDB_RANGE_STRUCT_keep_cond_set
    __swig_getmethods__["keep_cond"] = _cnumpydb.NUMPYDB_RANGE_STRUCT_keep_cond_get
    if _newclass:
        keep_cond = _swig_property(_cnumpydb.NUMPYDB_RANGE_STRUCT_keep_cond_get, _cnumpydb.NUMPYDB_RANGE_STRUCT_keep_cond_set)
    __swig_setmethods__["nlow"] = _cnumpydb.NUMPYDB_RANGE_STRUCT_nlow_set
    __swig_getmethods__["nlow"] = _cnumpydb.NUMPYDB_RANGE_STRUCT_nlow_get
    if _newclass:
        nlow = _swig_property(_cnumpydb.NUMPYDB_RANGE_STRUCT_nlow_get, _cnumpydb.NUMPYDB_RANGE_STRUCT_nlow_set)

    def __init__(self):
        this = _cnumpydb.new_NUMPYDB_RANGE_STRUCT()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cnumpydb.delete_NUMPYDB_RANGE_STRUCT
    __del__ = lambda self: None
NUMPYDB_RANGE_STRUCT_swigregister = _cnumpydb.NUMPYDB_RANGE_STRUCT_swigregister
NUMPYDB_RANGE_STRUCT_swigregister(NUMPYDB_RANGE_STRUCT)

class NumpyDB(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NumpyDB, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NumpyDB, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _cnumpydb.new_NumpyDB(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _cnumpydb.delete_NumpyDB
    __del__ = lambda self: None

    def open(self, pyobj_dbfile: 'PyObject *', pyobj_db_open_flags: 'PyObject *') -> "void":
        return _cnumpydb.NumpyDB_open(self, pyobj_dbfile, pyobj_db_open_flags)

    def create(self, pyobj_dbfile: 'PyObject *', pyobj_key_descr: 'PyObject *', pyobj_data_descr: 'PyObject *') -> "void":
        return _cnumpydb.NumpyDB_create(self, pyobj_dbfile, pyobj_key_descr, pyobj_data_descr)

    def close(self) -> "void":
        return _cnumpydb.NumpyDB_close(self)

    def put(self, key_obj: 'PyObject *', data_obj: 'PyObject *') -> "void":
        return _cnumpydb.NumpyDB_put(self, key_obj, data_obj)

    def between(self, pyobj_low: 'PyObject *', pyobj_high: 'PyObject *', pyobj_action: 'PyObject *') -> "PyObject *":
        return _cnumpydb.NumpyDB_between(self, pyobj_low, pyobj_high, pyobj_action)

    def range_generic(self, pyobj_low: 'PyObject *', pyobj_high: 'PyObject *', pyobj_query_type: 'PyObject *', pyobj_return_type: 'PyObject *') -> "PyObject *":
        return _cnumpydb.NumpyDB_range_generic(self, pyobj_low, pyobj_high, pyobj_query_type, pyobj_return_type)

    def match(self, pyobj_value: 'PyObject *', pyobj_action: 'PyObject *') -> "PyObject *":
        return _cnumpydb.NumpyDB_match(self, pyobj_value, pyobj_action)

    def print_nrecords(self, obj: 'PyObject *') -> "void":
        return _cnumpydb.NumpyDB_print_nrecords(self, obj)

    def file_name(self) -> "PyObject *":
        return _cnumpydb.NumpyDB_file_name(self)

    def key_dtype(self) -> "PyObject *":
        return _cnumpydb.NumpyDB_key_dtype(self)

    def data_dtype(self) -> "PyObject *":
        return _cnumpydb.NumpyDB_data_dtype(self)

    def set_cachesize(self, gbytes: 'int', bytes: 'int', ncache: 'int') -> "void":
        return _cnumpydb.NumpyDB_set_cachesize(self, gbytes, bytes, ncache)

    def set_verbosity(self, verbosity: 'int') -> "void":
        return _cnumpydb.NumpyDB_set_verbosity(self, verbosity)

    def print_info(self) -> "void":
        return _cnumpydb.NumpyDB_print_info(self)

    def test(self, obj: 'PyObject *') -> "PyObject *":
        return _cnumpydb.NumpyDB_test(self, obj)
NumpyDB_swigregister = _cnumpydb.NumpyDB_swigregister
NumpyDB_swigregister(NumpyDB)

# This file is compatible with both classic and new-style classes.


